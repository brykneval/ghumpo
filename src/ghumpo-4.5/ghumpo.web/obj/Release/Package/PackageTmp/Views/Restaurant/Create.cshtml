@model ghumpo.web.ViewModel.RestaurantViewModel

@{
    ViewBag.Title = "";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <h4>Restaurant - Step 2</h4>
    <hr/>
    <div class="col-md-6">
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new {@class = "text-danger"})
            <div class="form-group">
                @Html.LabelFor(model => model.Cuisine, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Cuisine, new {htmlAttributes = new {@class = "form-control"}})
                    @Html.ValidationMessageFor(model => model.Cuisine, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MenuSpecial, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MenuSpecial, new {htmlAttributes = new {@class = "form-control"}})
                    @Html.ValidationMessageFor(model => model.MenuSpecial, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Contact, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Contact, new {htmlAttributes = new {@class = "form-control"}})
                    @Html.ValidationMessageFor(model => model.Contact, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HasReservation, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.RadioButtonFor(m => m.HasReservation, "true", new {@checked = "checked", name = "groupReservation"}) Yes
                        @Html.RadioButtonFor(m => m.HasReservation, "false", new {name = "groupReservation"}) No
                        @Html.ValidationMessageFor(model => model.HasReservation, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HasCard, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.RadioButtonFor(m => m.HasCard, "true", new {@checked = "checked", name = "groupCard"}) Yes
                        @Html.RadioButtonFor(m => m.HasCard, "false", new {name = "groupCard"}) No
                        @Html.ValidationMessageFor(model => model.HasCard, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HasParking, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.RadioButtonFor(m => m.HasParking, "true", new {@checked = "checked", name = "groupParking"}) Yes
                        @Html.RadioButtonFor(m => m.HasParking, "false", new {name = "groupParking"}) No
                        @Html.ValidationMessageFor(model => model.HasParking, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HasAlcohol, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.RadioButtonFor(m => m.HasAlcohol, "true", new {@checked = "checked", name = "groupAlcohol"}) Yes
                        @Html.RadioButtonFor(m => m.HasAlcohol, "false", new {name = "groupAlchohol"}) No
                        @Html.ValidationMessageFor(model => model.HasAlcohol, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HasSmoking, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.RadioButtonFor(m => m.HasSmoking, "true", new {@checked = "checked", name = "groupSmoking"}) Yes
                        @Html.RadioButtonFor(m => m.HasSmoking, "false", new {name = "groupSmoking"}) No
                        @Html.ValidationMessageFor(model => model.HasSmoking, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HasWifi, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.RadioButtonFor(m => m.HasWifi, "true", new {@checked = "checked", name = "groupWifi"}) Yes
                        @Html.RadioButtonFor(m => m.HasWifi, "false", new {name = "groupWifi"}) No
                        @Html.ValidationMessageFor(model => model.HasWifi, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HasFloorSeating, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.RadioButtonFor(m => m.HasFloorSeating, "true", new {@checked = "checked", name = "groupWifi"}) Yes
                        @Html.RadioButtonFor(m => m.HasFloorSeating, "false", new {name = "groupWifi"}) No
                        @Html.ValidationMessageFor(model => model.HasWifi, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HasLounge, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.RadioButtonFor(m => m.HasLounge, "true", new {@checked = "checked", name = "groupWifi"}) Yes
                        @Html.RadioButtonFor(m => m.HasLounge, "false", new {name = "groupWifi"}) No
                        @Html.ValidationMessageFor(model => model.HasWifi, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HasOutdoor, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.RadioButtonFor(m => m.HasOutdoor, "true", new {@checked = "checked", name = "groupWifi"}) Yes
                        @Html.RadioButtonFor(m => m.HasOutdoor, "false", new {name = "groupWifi"}) No
                        @Html.ValidationMessageFor(model => model.HasWifi, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HasIndoor, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.RadioButtonFor(m => m.HasIndoor, "true", new {@checked = "checked", name = "groupWifi"}) Yes
                        @Html.RadioButtonFor(m => m.HasIndoor, "false", new {name = "groupWifi"}) No
                        @Html.ValidationMessageFor(model => model.HasWifi, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <input id="pac-input" class="form-control" type="text" placeholder="Search Box">
        <div class="form-group">
            <div id="map_canvas" style="height: 400px; width: 100%;"></div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.GeoCoordinates.Address, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.GeoCoordinates.Address, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.GeoCoordinates.Address, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default"/>
            </div>
        </div>
    </div>
    @Html.HiddenFor(m => m.GeoCoordinates.Latitude)
    @Html.HiddenFor(m => m.GeoCoordinates.Longitude)
    @Html.HiddenFor(m => m.GeoCoordinates.AddressByGoogle)
}
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script async defer src="https://maps.google.com/maps/api/js?key=AIzaSyA5H8PDBFtXOL9Cc3cAToVeIGdm7XTGD0o&libraries=places&callback=initMap"> </script>
<script type="text/javascript">
    var myMarker;

    function initMap() {
        var map = new google.maps.Map(document.getElementById('map_canvas'),
        {
            zoom: 14,
            center: new google.maps.LatLng(27.696802, 85.331626),
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });
        var geocoder = new google.maps.Geocoder;

        myMarker = new google.maps.Marker({
            position: new google.maps.LatLng(27.696802, 85.331626),
            draggable: true
        });
        google.maps.event.addListener(myMarker,
            'dragend',
            function(evt) {
                var lat = evt.latLng.lat();
                var lng = evt.latLng.lng();
                document.getElementById('GeoCoordinates_Longitude').value = lng;
                document.getElementById('GeoCoordinates_Latitude').value = lat;
                geocodeLatLng(geocoder, map, lat, lng);
            });

        map.setCenter(myMarker.position);
        myMarker.setMap(map);

        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [myMarker];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
            debugger;
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            // Clear out the old markers.
            markers.forEach(function(marker) {
                marker.setMap(null);
            });
            markers = [];
            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function(place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };
                debugger;
                var lat = place.geometry.location.lat();
                var lng = place.geometry.location.lng();
                myMarker = new google.maps.Marker({
                    position: new google.maps.LatLng(lat, lng),
                    draggable: true
                });
                myMarker.setMap(map);

                geocodeLatLng(geocoder, map, lat, lng);
                document.getElementById('GeoCoordinates_Longitude').value = lng;
                document.getElementById('GeoCoordinates_Latitude').value = lat;
                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });
    }

    function geocodeLatLng(geocoder, map, lat, lng) {
        var latlng = { lat: parseFloat(lat), lng: parseFloat(lng) };
        geocoder.geocode({ 'location': latlng }, function(results, status) {
            if (status === 'OK') {
                if (results[1]) {
                    document.getElementById('GeoCoordinates_AddressByGoogle').value = results[1].formatted_address;
                } else {

                }
            } else {

            }
        });
    }
</script>